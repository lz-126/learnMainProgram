<!--pages/wxml/wxml.wxml-->
<!-- 1. wxml 基本格式 -->
<!--
  1.1 类似于HTML代码: 比如可以写成单标签,也可以写成双标签
  1.2 必须有严格的闭合: 没有闭合会导致编译错误
  1.3 大小写敏感: class和Class是不同的属性
  -->

<!-- 2. Mustache语法 -->
<view>{{message}}</view>
<view>{{firstName}} {{lastName}}</view>
<view>{{firstName + ' ' + lastName}}</view>
<view>{{age >= 18? '成年人': '未成年人'}}</view>
<view>{{nowTime}}</view>

<button size="mini" bindtap="handleSwitchColor">切换颜色</button>
<view class="{{isActive? 'active' : ''}}">哈哈哈哈哈</view>

<view>-------------条件判断----------</view>
<!-- wx:if 的使用 -->
<button size="mini" bindtap="handleSwitchShow">切换显示</button>
<view wx:if="{{isShow}}">哈哈哈哈</view>

<!-- wx:elif/wx:else -->
<button size="mini" bindtap="hanleScroeAdd">分数加6</button>
<button size="mini" bindtap="hanleScroeSub">分数减6</button>
<view>分数:{{score}}</view>
<view wx:if="{{score > 90 }}">优秀</view>
<view wx:elif="{{score >= 80 }}">良好</view>
<view wx:elif="{{score >= 60 }}">及格</view>
<view wx:else>不及格</view>

<!-- hiddle wx:if="{{false}}" 区别 -->
<!-- 
  hiddle:隐藏时,该组件依然是存在的(display:none)
  wx:if="{{false}}" 根本不会被创建

  如果显示隐藏频率高 则使用hiddle  反之使用 v-if

 -->
<view>-----------列表渲染----------</view>
 <!-- 1wx:for的回顾 -->
 <!-- 1.1. 遍历数组/字符串/数字 -->
 <!-- <view wx:for="{{['abc','cba','nba']}}">{{item}}{{index}}</view>
<view wx:for="coderwhy">{{item}} {{index}}</view>
<view wx:for="{{6}}">{{item}}</view> -->

<!-- 1.2 block 标签 并不是一个组件 仅仅是一个包裹元素,不会在页面做任何的渲染,只接受控制属性(wx:if ...) --> 
<!-- <block wx:for="{{3}}">
  <button>按钮</button>
  <view>呵呵呵</view>
  <text>我是内容</text>
</block> -->

<!-- 3.item index起名字 -->
<view wx:for="{{movies}}" wx:for-item="movie" wx:for-index="i" >{{movie}} {{i}}</view>

<block wx:for="{{nums}}" wx:for-item="inner_nums" >
  <block wx:for = "{{inner_nums}}" >
  <view>{{item}}</view>
  </block>
</block>

<!--4. key的作用 -->
<!--在没有key值时,页面渲染时,以dom树结构进行渲染,如果数据发生改变,会进行对应数据改变,依此进行渲染,性能比较浪费  -->
<!-- 如果有绑定key值 就相当于给item绑定一个id 在进行同样的渲染时,原来的顺序不变,对id进行对比,没有改变的进行复用,会将改变的进行对应的插入/替换 达到节省性能 -->
<view class="container">
  <view wx:for="{{letters}}" wx:key="item">{{item}}</view>
</view>